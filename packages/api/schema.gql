# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type NodeSettingsFieldDto {
  id: ID!
  key: String!
  value: String!
}

type NodeMeasurementUnitDto {
  key: String!
  name: String!
  unit: String!
}

type NodeMeasurementDto {
  key: String!
  name: String!
  unit_options: [NodeMeasurementUnitDto!]!
}

type NodeChannelMeasurementDto {
  node_id: ID!
  channel: String!
  measurement: String!
  time: DateTime!
  value: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type NodeStatusDto {
  node_id: ID!
  connected: Boolean!
  active: Boolean!
  channels: [Int!]!
}

type MeasurementConversionEntity {
  id: ID!
  convert_unit_from: String!
  convert_unit_to: String!
  equation: String!
}

type NodeChannelEntity {
  id: ID!
  name: String!
  is_enabled: Boolean!
  default_measurement_unit: String!
  channel: Int!
  icon: String
  settings: [NodeSettingsFieldDto!]!
  node: NodeEntity!
  node_id: ID!
  conversion: MeasurementConversionEntity
  measurement: NodeMeasurementDto!
}

type NodeEntity {
  id: ID!
  public_key: ID!
  type: NodeTypeEnum!
  name: String!
  nickname: String!
  icon: String!
  is_enabled: Boolean!
  settings: [NodeSettingsFieldDto!]!
  channels: [NodeChannelEntity!]!
}

enum NodeTypeEnum {
  INPUT
  OUTPUT
}

type ConditionalActionEntity {
  id: ID!
  target_id: ID!
  target_type: ControllerTypeEnum!
  target_type_channel: Int
  target_value: String!
  target_value_type: String!
  target_duration: String
  target_duration_value: String
}

enum ControllerTypeEnum {
  INPUT
  OUTPUT
  CONDITIONAL
}

type DashboardCardEntity {
  id: ID!
  order: Int!
  controller_id: ID!
  controller_type: ControllerTypeEnum!
}

type ApCredentialsDto {
  ip: String!
  ssid: String!
  password: String!
}

type Query {
  pingNetwork: Boolean!
  getHubNetworkType: String!
  getNodeApCredentials: ApCredentialsDto!
  getHubFiSSID: String!
  getAllNodesStatus: [NodeStatusDto!]!
  findAllNodes: [NodeEntity!]!
  findNodeChannelsByNodeId(node_id: ID!): [NodeChannelEntity!]!
  findLastMeasurementAvailable(node_id: ID!): [NodeChannelMeasurementDto!]!
  findLastMeasurementByDuration(input: LastMeasurementByDurationInput!): [NodeChannelMeasurementDto!]!
  findAllDashboardCards: [DashboardCardEntity!]!
}

input LastMeasurementByDurationInput {
  node_id: ID!
  past_seconds: Int!
}

type Mutation {
  setupHubInstance(token: String!): Boolean!
  setNodeApCredentials: ApCredentialsDto!
  setHubNetworkType(type: String!): Boolean!
  setHubFiCredentials(input: HubfiCredentialsInput!): ApCredentialsDto!
  createNode(input: CreateNodeInput!): NodeEntity!
  updateNodeStatus(input: UpdateNodeStatusInput!, id: ID!): NodeEntity!
  updateNodeNickname(input: UpdateNodeNicknameInput!, id: ID!): NodeEntity!
  updateNodeSettings(channel_id: ID, input: [UpdateNodeSettingInput!]!, id: ID!): NodeEntity!
  updateChannelMeasurementUnit(input: UpdateChannelMeasurementUnitInput!): NodeChannelEntity!
  updateOutputChannelName(input: UpdateChannelNameInput!, channel_id: ID!): NodeChannelEntity!
  updateOutputChannelIcon(input: UpdateChannelIconInput!, channel_id: ID!): NodeChannelEntity!
  nodeInputUpdateActiveStatus(status: NodeInputActiveStatusEnum!, node_id: ID!): InputControllerResponseEnum!
  nodeOutputUpdateState(input: OutputUpdateStateInput!, node_id: ID!): OutputControllerResponseEnum!
  addDashboardCard(input: AddDashboardCardInput!): DashboardCardEntity!
  removeDashboardCard(controller_id: ID!): Boolean!
}

input HubfiCredentialsInput {
  ssid: String!
  password: String!
}

input CreateNodeInput {
  model_name: String!
  public_key: ID!
  instance_key: ID!
  nickname: String!
  icon: String!
  type: NodeTypeEnum!
  settings: [CreateNodeSettingsFieldInput!]!
  channels: [CreateNodeChannel!]
}

input CreateNodeSettingsFieldInput {
  id: ID!
  key: String!
  value: String!
}

input CreateNodeChannel {
  name: String
  channel: Int!
  measurement_key: String!
  settings: [CreateNodeSettingsFieldInput!]!
}

input UpdateNodeStatusInput {
  is_enabled: Boolean!
}

input UpdateNodeNicknameInput {
  nickname: String!
}

input UpdateNodeSettingInput {
  id: ID!
  value: String!
}

input UpdateChannelMeasurementUnitInput {
  id: ID!
  unit: String!
}

input UpdateChannelNameInput {
  name: String!
}

input UpdateChannelIconInput {
  icon: String
}

enum InputControllerResponseEnum {
  NOT_CONNECTED
  SUCCESS
}

enum NodeInputActiveStatusEnum {
  ACTIVATE
  DEACTIVATE
}

enum OutputControllerResponseEnum {
  NOT_CONNECTED
  SUCCESS
}

input OutputUpdateStateInput {
  channel: Int!
  state: NodeOutputStateEnum!
}

enum NodeOutputStateEnum {
  ON
  OFF
}

input AddDashboardCardInput {
  controller_id: ID!
  controller_type: ControllerTypeEnum!
}
