# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type NodeMeasurementUnitDto {
  key: String!
  name: String!
  unit: String!
}

type NodeMeasurementDto {
  key: String!
  name: String!
  unit_options: [NodeMeasurementUnitDto!]!
}

type NodeChannelMeasurementDto {
  node_id: ID!
  channel: Int!
  measurement: String!
  time: String!
  value: String!
}

type NodeStatusDto {
  connected: [String!]!
  active: [String!]!
}

type MeasurementConversionEntity {
  id: ID!
  convert_unit_from: String!
  convert_unit_to: String!
  equation: String!
}

type NodeChannelEntity {
  id: ID!
  name: String!
  is_enabled: Boolean!
  default_measurement_unit: String!
  channel: Int!
  custom_options: String
  node: NodeEntity!
  node_id: ID!
  conversion: MeasurementConversionEntity
  measurement: NodeMeasurementDto!
}

type NodeEntity {
  id: ID!
  public_key: ID!
  secret_key: ID!
  type: NodeTypeEnum!
  name: String!
  nickname: String!
  icon: String!
  is_enabled: Boolean!
  custom_options: String
  channels: [NodeChannelEntity!]!
}

enum NodeTypeEnum {
  INPUT
  OUTPUT
}

type ConditionalActionEntity {
  id: ID!
  target_id: ID!
  target_type: ConditionalActionTargetTypeEnum!
  target_type_channel: Int
  target_value: String!
  target_value_type: String!
  target_duration: String
  target_duration_value: String
}

enum ConditionalActionTargetTypeEnum {
  INPUT
  OUTPUT
  CONDITIONAL
}

type NodeInputSettingsEntity {
  id: ID!
  period: Int!
  custom_options: String
  node: NodeEntity!
  node_id: ID!
}

type CheckHubDto {
  node_secret: ID!
  is_active: Int!
}

type ApCredentialsDto {
  ip: String!
  ssid: String!
  password: String!
}

type Query {
  checkHub: [CheckHubDto!]!
  pingNetwork: Boolean!
  getHubNetworkType: String!
  getNodeApCredentials: ApCredentialsDto!
  getHubFiSSID: String!
  getNodeStatus: NodeStatusDto!
  findAllNodes: [NodeEntity!]!
  findNodeById(id: ID!): NodeEntity!
  findNodeChannelsByNodeId(node_id: ID!): [NodeChannelEntity!]!
  findInputSettingsByNodeId(node_id: ID!): NodeInputSettingsEntity!
  findLastMeasurement(node_id: ID!): NodeChannelMeasurementDto!
}

type Mutation {
  setupHubInstance(token: String!): Boolean!
  setNodeApCredentials: ApCredentialsDto!
  setHubNetworkType(type: String!): Boolean!
  setHubFiCredentials(input: HubfiCredentialsInput!): ApCredentialsDto!
  createNode(input: CreateNodeInput!): NodeEntity!
  updateNodeStatus(input: UpdateNodeStatusInput!, id: ID!): NodeEntity!
  updateNodeNickname(input: UpdateNodeNicknameInput!, id: ID!): NodeEntity!
  updateChannelMeasurementUnit(input: UpdateChannelMeasurementUnitInput!): NodeChannelEntity!
  updateInputSettingsPeriod(input: UpdateInputSettingsPeriodInput!, node_id: ID!): NodeInputSettingsEntity!
  nodeInputUpdateActiveStatus(status: NodeInputActiveStatusEnum!, node_id: ID!): Boolean!
}

input HubfiCredentialsInput {
  ssid: String!
  password: String!
}

input CreateNodeInput {
  model_name: String!
  public_key: ID!
  secret_key: ID!
  nickname: String!
  icon: String!
  type: NodeTypeEnum!
  custom_fields: String
  channels: [CreateNodeChannel!]
}

input CreateNodeChannel {
  name: String
  channel: Int!
  measurement_key: String!
  custom_fields: String!
}

input UpdateNodeStatusInput {
  is_enabled: Boolean!
}

input UpdateNodeNicknameInput {
  nickname: String!
}

input UpdateChannelMeasurementUnitInput {
  id: ID!
  unit: String!
}

input UpdateInputSettingsPeriodInput {
  period: Int!
}

enum NodeInputActiveStatusEnum {
  ACTIVATE
  DEACTIVATE
}
